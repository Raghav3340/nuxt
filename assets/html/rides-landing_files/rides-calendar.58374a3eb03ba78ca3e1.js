"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaem_maven_archetype"] = self["webpackChunkaem_maven_archetype"] || []).push([["rides-calendar"],{

/***/ "./src/main/webpack/components/re-rides/ridescalendar/js/classes/Calendar.js":
/*!***********************************************************************************!*\
  !*** ./src/main/webpack/components/re-rides/ridescalendar/js/classes/Calendar.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Calendar {\r\n    constructor() {\r\n        this.currentDate = new Date();\r\n        this.selectedDate = null;\r\n        this.selectedDateRange = {\r\n            start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\r\n            end: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0),\r\n        };\r\n        this.currentMonthMonthRange = {\r\n            start: null,\r\n            end: null,\r\n        };\r\n        this.totalRidesCount = {};\r\n        this.filteredRidesCount = {};\r\n        this.selectedView = \"list\";\r\n        this.isViewMoreExpanded = false;\r\n        this.initializeCalendar();\r\n        this.bindEvents();\r\n        this.bindViewEvent();\r\n        this.filterRides();\r\n        this.setRideCounts();\r\n        this.initViewMore();\r\n    }\r\n\r\n    setRideCounts() {\r\n        this.filteredRidesCount = {};\r\n        document\r\n            .querySelectorAll(\".rides-calendar__category-count\")\r\n            .forEach((count) => {\r\n                count.textContent = \"(0)\";\r\n\r\n                if (count.parentElement.getAttribute(\"data-category\") === \"all\") {\r\n                    return;\r\n                }\r\n                count.parentElement.classList.add(\"hidden\");\r\n            });\r\n        document\r\n            .querySelectorAll(`.rides-calendar__ride-card[data-visible]`)\r\n            .forEach((card) => {\r\n                const category = card.dataset.category;\r\n                if (category) {\r\n                    this.filteredRidesCount[category] =\r\n                        this.filteredRidesCount[category] + 1 || 1;\r\n                }\r\n            });\r\n\r\n        Object.keys(this.filteredRidesCount).forEach((category) => {\r\n            const count = this.filteredRidesCount[category];\r\n            const tab = document.querySelector(\r\n                `.rides-calendar__category-tab[data-category=\"${category}\"]`\r\n            );\r\n            if (tab) {\r\n                if (count > 0) {\r\n                    tab.classList.remove(\"hidden\");\r\n                }\r\n\r\n                tab.querySelector(\r\n                    \".rides-calendar__category-count\"\r\n                ).textContent = `(${count})`;\r\n            }\r\n        });\r\n\r\n        const allFilteredRidesCount = Object.values(\r\n            this.filteredRidesCount\r\n        ).reduce((partialSum, a) => partialSum + a, 0);\r\n        const allTab = document.querySelector(\r\n            `.rides-calendar__category-tab[data-category=\"all\"]`\r\n        );\r\n        allTab.querySelector(\r\n            \".rides-calendar__category-count\"\r\n        ).textContent = `(${allFilteredRidesCount})`;\r\n\r\n        // Object.keys(this.filteredRidesCount).forEach\r\n    }\r\n\r\n    initializeCalendar() {\r\n        const calendarGrid = document.querySelector(\r\n            \".rides-calendar__calendar-grid\"\r\n        );\r\n        const firstDay = new Date(\r\n            this.currentDate.getFullYear(),\r\n            this.currentDate.getMonth(),\r\n            1\r\n        );\r\n        const lastDay = new Date(\r\n            this.currentDate.getFullYear(),\r\n            this.currentDate.getMonth() + 1,\r\n            0\r\n        );\r\n        // if (this.selectedView === \"list\") {\r\n        this.currentMonthMonthRange.start = firstDay;\r\n        this.currentMonthMonthRange.end = lastDay;\r\n        // }\r\n\r\n        // Clear cells\r\n        const cells = calendarGrid.querySelectorAll(\".calendar-cell\");\r\n        cells.forEach((cell) => cell.remove());\r\n\r\n        // Add days from previous month\r\n        const firstDayOfWeek = firstDay.getDay() || 7;\r\n        if (firstDayOfWeek > 1) {\r\n            const prevMonthLastDay = new Date(\r\n                this.currentDate.getFullYear(),\r\n                this.currentDate.getMonth(),\r\n                0\r\n            ).getDate();\r\n\r\n            for (let i = 1; i < firstDayOfWeek; i++) {\r\n                const emptyCell = document.createElement(\"button\");\r\n                emptyCell.className = \"calendar-cell empty disabled\";\r\n                emptyCell.disabled = true;\r\n\r\n                const day = prevMonthLastDay - (firstDayOfWeek - i - 1);\r\n                const cellText = document.createElement(\"span\");\r\n                cellText.className = \"calendar-cell-text\";\r\n                cellText.textContent = day;\r\n                emptyCell.appendChild(cellText);\r\n\r\n                calendarGrid.appendChild(emptyCell);\r\n            }\r\n        }\r\n\r\n        // Add day cells for current month\r\n        for (let day = 1; day <= lastDay.getDate(); day++) {\r\n            const cell = document.createElement(\"button\");\r\n            cell.className = \"calendar-cell\";\r\n            const cellText = document.createElement(\"span\");\r\n            cellText.className = \"calendar-cell-text\";\r\n            cellText.textContent = day;\r\n            cell.appendChild(cellText);\r\n\r\n            // Event check\r\n            // eslint-disable-next-line max-len\r\n            const currentDate = `${this.currentDate.getFullYear()}-${String(\r\n                this.currentDate.getMonth() + 1\r\n            ).padStart(2, \"0\")}-${String(day).padStart(2, \"0\")}`;\r\n            const cardWithRideDate = document.querySelector(\r\n                `[data-date=\"${currentDate}\"]`\r\n            );\r\n            if (cardWithRideDate) {\r\n                cell.classList.add(\"has-event\");\r\n                cell.classList.add(`category-${cardWithRideDate.dataset.category}`);\r\n            }\r\n\r\n            // Selection check\r\n            // eslint-disable-next-line max-len\r\n            if (\r\n                this.isDateSelected(\r\n                    new Date(\r\n                        this.currentDate.getFullYear(),\r\n                        this.currentDate.getMonth(),\r\n                        day\r\n                    )\r\n                )\r\n            ) {\r\n                cell.classList.add(\"selected-date\");\r\n            }\r\n\r\n            cell.addEventListener(\"click\", (e) => this.handleDateClick(e, day));\r\n            calendarGrid.appendChild(cell);\r\n        }\r\n\r\n        // Add days from next month to complete the grid\r\n        const lastDayOfWeek = lastDay.getDay() || 7;\r\n        if (lastDayOfWeek < 7) {\r\n            const daysToAdd = 7 - lastDayOfWeek;\r\n            for (let i = 1; i <= daysToAdd; i++) {\r\n                const emptyCell = document.createElement(\"button\");\r\n                emptyCell.className = \"calendar-cell empty disabled\";\r\n                emptyCell.disabled = true;\r\n\r\n                const cellText = document.createElement(\"span\");\r\n                cellText.className = \"calendar-cell-text\";\r\n                cellText.textContent = i;\r\n                emptyCell.appendChild(cellText);\r\n\r\n                calendarGrid.appendChild(emptyCell);\r\n            }\r\n        }\r\n\r\n        // Update month\r\n        document.querySelector(\".rides-calendar__month-year\").textContent =\r\n            this.currentDate.toLocaleString(\"default\", {\r\n                month: \"long\",\r\n                year: \"numeric\",\r\n            });\r\n    }\r\n\r\n    isDateSelected(date) {\r\n        if (!this.selectedDateRange.start) return false;\r\n\r\n        if (!this.selectedDateRange.end) {\r\n            return date.getTime() === this.selectedDateRange.start.getTime();\r\n        }\r\n\r\n        return (\r\n            date >= this.selectedDateRange.start &&\r\n            date <= this.selectedDateRange.end\r\n        );\r\n    }\r\n\r\n    handleDateClick(event, day) {\r\n        const clickedDate = new Date(\r\n            this.currentDate.getFullYear(),\r\n            this.currentDate.getMonth(),\r\n            day\r\n        );\r\n        document\r\n            .querySelector('.rides-calendar__category-tab[data-category=\"all\"]')\r\n            .click();\r\n\r\n        // if (event.shiftKey && this.selectedDateRange.start) {\r\n        //     // Range selection\r\n        //     this.selectedDateRange.end = clickedDate;\r\n        //     if (this.selectedDateRange.end < this.selectedDateRange.start) {\r\n        //         [this.selectedDateRange.start, this.selectedDateRange.end] =\r\n        //             [this.selectedDateRange.end, this.selectedDateRange.start];\r\n        //     }\r\n        // } else {\r\n        // Single selection\r\n        this.selectedDateRange = {\r\n            start: clickedDate,\r\n            end: null,\r\n        };\r\n        // }\r\n\r\n        this.filterRides();\r\n        this.setRideCounts();\r\n        this.updateViewMore(false);\r\n    }\r\n\r\n    bindEvents() {\r\n        document\r\n            .querySelector(\".rides-calendar__prev-month\")\r\n            .addEventListener(\"click\", () => this.changeMonth(-1));\r\n        document\r\n            .querySelector(\".rides-calendar__next-month\")\r\n            .addEventListener(\"click\", () => this.changeMonth(1));\r\n    }\r\n\r\n    bindViewEvent() {\r\n        document\r\n            .querySelectorAll(\".rides-calendar__view-change-button\")\r\n            .forEach((button) => {\r\n                button.addEventListener(\"click\", (e) => this.handleViewChange(e));\r\n            });\r\n    }\r\n\r\n    handleViewChange(e) {\r\n        const button = e.currentTarget;\r\n        document\r\n            .querySelectorAll(\".rides-calendar__view-change-button\")\r\n            .forEach((btn) => {\r\n                btn.classList.remove(\"active\");\r\n            });\r\n        button.classList.add(\"active\");\r\n        document\r\n            .querySelector(\".rides-calendar__main-content\")\r\n            .setAttribute(\"selected-view\", button.dataset.viewType);\r\n        this.selectedView = button.dataset.viewType;\r\n        // if (this.selectedView === \"calendar\") {\r\n        //     this.selectedDateRange = {\r\n        //         start: null,\r\n        //         end: null\r\n        //     };\r\n        //     this.initializeCalendar();\r\n        // }\r\n    }\r\n\r\n    changeMonth(delta) {\r\n        this.currentDate.setMonth(this.currentDate.getMonth() + delta);\r\n        this.initializeCalendar();\r\n        // if (this.selectedView === \"list\") {\r\n        document\r\n            .querySelector('.rides-calendar__category-tab[data-category=\"all\"]')\r\n            .click();\r\n        this.selectedDateRange = this.currentMonthMonthRange;\r\n        this.filterRides();\r\n        this.setRideCounts();\r\n        this.updateViewMore(false);\r\n    }\r\n\r\n    toggleEmptyMessage(show = true) {\r\n        if (show) {\r\n            document.querySelector(\r\n                \".rides-calendar__no-rides-message\"\r\n            ).style.display = \"block\";\r\n        } else {\r\n            document.querySelector(\r\n                \".rides-calendar__no-rides-message\"\r\n            ).style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    updateViewMore(isViewMore = false) {\r\n        const visibleRides = document.querySelectorAll('.rides-calendar__ride-card[data-visible=\"true\"]');\r\n        const viewMoreButton = document.querySelector('.rides-calendar__view-more-button');\r\n        this.isViewMoreExpanded = isViewMore;\r\n\r\n        visibleRides.forEach((card, index) => {\r\n            card.style.display = isViewMore || index < 3 ? 'flex' : 'none';\r\n        });\r\n\r\n        if (visibleRides.length <= 3) {\r\n            viewMoreButton.style.display = 'none';\r\n        } else {\r\n            viewMoreButton.style.display = 'flex';\r\n        }\r\n\r\n        viewMoreButton.innerHTML = this.isViewMoreExpanded\r\n            ? 'VIEW LESS <svg style=\"transform: rotate(-90deg);\" class=\"arrow-icon\" viewBox=\"0 0 24 24\"><path fill=\"red\" d=\"M8.59,7.41L13.17,12L8.59,16.59L10,18L16,12L10,6L8.59,7.41Z\"></path></svg>'\r\n            : 'VIEW MORE <svg class=\"arrow-icon\" viewBox=\"0 0 24 24\"><path fill=\"red\" d=\"M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\"></path></svg>';\r\n    }\r\n\r\n    initViewMore() {\r\n        const viewMoreButton = document.querySelector('.rides-calendar__view-more-button');\r\n\r\n        this.updateViewMore();\r\n\r\n        viewMoreButton.addEventListener('click', () => {\r\n            this.isViewMoreExpanded = !this.isViewMoreExpanded;\r\n            if (!this.isViewMoreExpanded) {\r\n                const categoryTabs = document.querySelector(\".rides-calendar__header\");\r\n                categoryTabs.scrollIntoView({ behavior: \"smooth\", block: \"start\", inline: \"nearest\" });\r\n            }\r\n            this.updateViewMore(this.isViewMoreExpanded);\r\n        });\r\n    }\r\n\r\n    filterRides() {\r\n        const rides = document.querySelectorAll(\".rides-calendar__ride-card\");\r\n        let visibleRideCards = 0;\r\n\r\n        rides.forEach((ride) => {\r\n            const rideDate = new Date(ride.dataset.date);\r\n            let showRide = false;\r\n\r\n            if (this.selectedDateRange.end) {\r\n                showRide =\r\n                    rideDate >= this.selectedDateRange.start &&\r\n                    rideDate <= this.selectedDateRange.end;\r\n            } else if (this.selectedDateRange.start) {\r\n                showRide =\r\n                    rideDate.toDateString() ===\r\n                    this.selectedDateRange.start.toDateString();\r\n            } else {\r\n                showRide = true;\r\n            }\r\n\r\n            if (showRide) {\r\n                ride.style.display = \"flex\";\r\n                ride.setAttribute(\"data-visible\", \"true\");\r\n                visibleRideCards++;\r\n            } else {\r\n                ride.style.display = \"none\";\r\n                ride.removeAttribute(\"data-visible\");\r\n            }\r\n\r\n            // ride.style.display = showRide ? 'flex' : 'none';\r\n        });\r\n\r\n        if (visibleRideCards === 0) {\r\n            this.toggleEmptyMessage(true);\r\n        } else {\r\n            this.toggleEmptyMessage(false);\r\n        }\r\n\r\n        this.updateViewMore(false);\r\n    }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Calendar);\r\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/components/re-rides/ridescalendar/js/classes/Calendar.js?");

/***/ }),

/***/ "./src/main/webpack/components/re-rides/ridescalendar/js/classes/RideFilter.js":
/*!*************************************************************************************!*\
  !*** ./src/main/webpack/components/re-rides/ridescalendar/js/classes/RideFilter.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass RideFilter {\r\n    constructor() {\r\n        this.activeCategory = \"all\";\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        const tabs = document.querySelectorAll(\".rides-calendar__category-tab\");\r\n        tabs.forEach((tab) => {\r\n            tab.addEventListener(\"click\", () => {\r\n                document\r\n                    .querySelector(\".calendar-cell.selected-date\")\r\n                    ?.classList.remove(\"selected-date\");\r\n                this.setActiveCategory(tab.dataset.category);\r\n                this.updateTabs(tabs, tab);\r\n                this.filterRides();\r\n            });\r\n        });\r\n    }\r\n\r\n    setActiveCategory(category) {\r\n        this.activeCategory = category;\r\n    }\r\n\r\n    updateTabs(tabs, activeTab) {\r\n        tabs.forEach((tab) => tab.classList.remove(\"active\"));\r\n        activeTab.classList.add(\"active\");\r\n    }\r\n\r\n    filterRides() {\r\n        const rides = document.querySelectorAll(\".rides-calendar__ride-card\");\r\n        const selectedDate = window.calendar.selectedDateRange.start;\r\n        window.calendar.selectedDateRange = {\r\n            start: new Date(\r\n                new Date(selectedDate).getFullYear(),\r\n                new Date(selectedDate).getMonth(),\r\n                1\r\n            ),\r\n            end: new Date(\r\n                new Date(selectedDate).getFullYear(),\r\n                new Date(selectedDate).getMonth() + 1,\r\n                0\r\n            ),\r\n        };\r\n        let visibleRideCards = 0;\r\n        rides.forEach((ride) => {\r\n            const rideDate = new Date(ride.dataset.date);\r\n            const showRide =\r\n                (this.activeCategory === \"all\" ||\r\n                    ride.dataset.category === this.activeCategory) &&\r\n                rideDate >= window.calendar.selectedDateRange.start &&\r\n                rideDate <= window.calendar.selectedDateRange.end;\r\n\r\n            if (ride.style.display !== \"none\" || showRide) {\r\n                if (showRide) {\r\n                    ride.style.display = \"flex\";\r\n                    ride.setAttribute(\"data-visible\", \"true\");\r\n                    visibleRideCards++;\r\n                } else {\r\n                    ride.style.display = \"none\";\r\n                    ride.removeAttribute(\"data-visible\");\r\n                }\r\n            }\r\n        });\r\n\r\n        const viewMoreButton = document.querySelector('.rides-calendar__view-more-button');\r\n        if (this.activeCategory === \"all\") {\r\n            window.calendar.updateViewMore(false);\r\n            visibleRideCards > 3 ? viewMoreButton.style.display = 'flex' : viewMoreButton.style.display = 'none';\r\n        } else {\r\n            viewMoreButton.style.display = 'none';\r\n        }\r\n\r\n        if (visibleRideCards === 0) {\r\n            window.calendar.toggleEmptyMessage(true);\r\n        } else {\r\n            window.calendar.toggleEmptyMessage(false);\r\n        }\r\n    }\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (RideFilter);\r\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/components/re-rides/ridescalendar/js/classes/RideFilter.js?");

/***/ }),

/***/ "./src/main/webpack/components/re-rides/ridescalendar/js/ridescalendar.js":
/*!********************************************************************************!*\
  !*** ./src/main/webpack/components/re-rides/ridescalendar/js/ridescalendar.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _classes_Calendar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/Calendar.js */ \"./src/main/webpack/components/re-rides/ridescalendar/js/classes/Calendar.js\");\n/* harmony import */ var _classes_RideFilter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/RideFilter.js */ \"./src/main/webpack/components/re-rides/ridescalendar/js/classes/RideFilter.js\");\n\r\n\r\n\r\nconst RidesCalendar = {\r\n  init: function () {\r\n    // console.log(\"rides calendar component\");\r\n    window.calendar = new _classes_Calendar_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    window.rideFilter = new _classes_RideFilter_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n  },\r\n};\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (RidesCalendar);\r\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/components/re-rides/ridescalendar/js/ridescalendar.js?");

/***/ })

}]);