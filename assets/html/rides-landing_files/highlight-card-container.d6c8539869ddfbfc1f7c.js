"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaem_maven_archetype"] = self["webpackChunkaem_maven_archetype"] || []).push([["highlight-card-container"],{

/***/ "./src/main/webpack/components/re-rides/highlights/js/highlights.js":
/*!**************************************************************************!*\
  !*** ./src/main/webpack/components/re-rides/highlights/js/highlights.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n\r\nconst HighlightsComponent = {\r\n  init: function (element) {\r\n    // Initialize Swiper\r\n    // console.log(\"highlight-card-container\");\r\n    var slideDiv = \"\";\r\n    var swiperWrapper = document.querySelector(\".swiper .upper-swiper\");\r\n    var bottomSwipwerWrapper = document.querySelector(\r\n      \".thumbnail-swiper .swiper-wrapper\"\r\n    );\r\n    var progressBarsWrapper = document.querySelector(\".progress-container\");\r\n    var currentImage = \"\";\r\n    // Move currentSlideData to component scope\r\n    var currentSlideData = {}; // Store current slide data for download/share actions\r\n    // Define selectedPopup at component scope\r\n    let selectedPopup = \"\";\r\n\r\n    function initDataStore(element) {\r\n      const div = element.querySelector(\"div[data-store]\");\r\n\r\n      // Retrieve the 'data-store' attribute and parse it as JSON\r\n      const data = JSON.parse(div.getAttribute(\"data-store\"));\r\n\r\n      console.log(data);\r\n      // Access the images array\r\n      const images = data.images;\r\n\r\n      const length = images.length;\r\n      let currentImage = \"\";\r\n\r\n      // Loop through the images array and create swiper-slide elements\r\n      images.forEach((image, index) => {\r\n        slideDiv = document.createElement(\"div\");\r\n        slideDiv.classList.add(\"swiper-slide\");\r\n\r\n        // Create slide content with background image and captions\r\n        slideDiv.innerHTML = `\r\n       ${image.type == \"image\"\r\n            ? `  <div class=\"slide-content\" style=\"background-image: url('${image.url\r\n            }')\">\r\n            <div class=\"image-caption\">\r\n                <span>${image.title}</span>\r\n                <span>${index + 1} / ${length} </span>\r\n            </div>\r\n        </div> `\r\n            : \"\"\r\n          }\r\n    ${image.type == \"video\"\r\n            ? `\r\n     <div class=\"slide-content\">\r\n  <video  src=\"${image.videourl}\" controls title=\"video-popup-triger\"\r\n\r\n                    class=\"hero-section-video-popup-trigger\"\r\n                 \r\n                  >\r\n                    <div class=\"video-thumbnail-wrapper\">\r\n                      <svg\r\n                        class=\"hero-modal-play-icon\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                        <path d=\"M8 5v14l11-7z\"></path>\r\n                      </svg>\r\n                    </div>\r\n                    </video> </div>`\r\n            : \"\"\r\n          }\r\n\r\n\r\n\r\n                      ${image?.type === \"iframe\"\r\n            ? `\r\n     <div class=\"slide-content\">\r\n <iframe width=\"400\" height=\"550\" src=\"${image.videourl}\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n </div>`\r\n            : \"\"\r\n          }\r\n        \r\n        <div class=\"header-actions\">\r\n            <button title=\"action-button\" class=\"action-button gallery1--download\" data-download=\"#\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                    <g fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\">\r\n                        <path stroke-dasharray=\"20\" stroke-dashoffset=\"20\" d=\"M12 4h2v6h2.5l-4.5 4.5M12 4h-2v6h-2.5l4.5 4.5\">\r\n                            <animate fill=\"freeze\" attributeName=\"stroke-dashoffset\" dur=\"0.4s\" values=\"20;0\" />\r\n                        </path>\r\n                        <path stroke-dasharray=\"14\" stroke-dashoffset=\"14\" d=\"M6 19h12\">\r\n                            <animate fill=\"freeze\" attributeName=\"stroke-dashoffset\" begin=\"0.5s\" dur=\"0.2s\" values=\"14;0\" />\r\n                        </path>\r\n                    </g>\r\n                </svg>\r\n            </button>\r\n             <button title=\"action-button\" class=\"action-button gallery1--share\" data-share='#'>\r\n               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n               <circle cx=\"18\" cy=\"5\" r=\"1\" fill=\"currentColor\" opacity=\"0.3\" />\r\n                <circle cx=\"6\" cy=\"12\" r=\"1\" fill=\"currentColor\" opacity=\"0.3\" />\r\n                 <circle cx=\"18\" cy=\"19.02\" r=\"1\" fill=\"currentColor\" opacity=\"0.3\" />\r\n                <path fill=\"currentColor\" d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81c1.66 0 3-1.34 3-3s-1.34-3-3-3s-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65c0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92M18 4c.55 0 1 .45 1 1s-.45 1-1 1s-1-.45-1-1s.45-1 1-1M6 13c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1m12 7.02c-.55 0-1-.45-1-1s.45-1 1-1s1 .45 1 1s-.45 1-1 1\" />\r\n               </svg></button>\r\n        </div>\r\n    `;\r\n        const downloadButton = slideDiv.querySelector(\".gallery1--download\");\r\n        const shareButton = slideDiv.querySelector(\".gallery1--share\");\r\n\r\n        if (downloadButton) {\r\n          downloadButton.addEventListener(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            const devices = JSON.parse(\r\n              e.currentTarget.getAttribute(\"data-devices\")\r\n            );\r\n            const title = e.currentTarget.getAttribute(\"data-title\");\r\n            // Open device selection modal\r\n            const deviceDownloadPopup = document.getElementById(\r\n              \"deviceSelectionModal\"\r\n            );\r\n            if (deviceDownloadPopup) {\r\n              deviceDownloadPopup.style.display = \"block\";\r\n\r\n              // Add event listeners for each device download button\r\n              const desktopBtn =\r\n                deviceDownloadPopup.querySelector(\".download-desktop\");\r\n              const laptopBtn =\r\n                deviceDownloadPopup.querySelector(\".download-laptop\");\r\n              const mobileBtn =\r\n                deviceDownloadPopup.querySelector(\".download-mobile\");\r\n\r\n              let selectedImageUrl = null; // To store the URL of the selected image\r\n              let selectedDeviceName = \"\";\r\n\r\n              // Add an 'active' class to the selected button and store the selected image URL\r\n              if (desktopBtn && image.devices && image.devices.desktop) {\r\n                desktopBtn.onclick = () => {\r\n                  removeValidationMessage();\r\n                  selectedImageUrl = image.devices.desktop;\r\n                  selectedDeviceName = \"Desktop\";\r\n                  clearSelections(); // Clear any previous selections\r\n                  desktopBtn.classList.add(\"selected\"); // Add selected class for styling\r\n                };\r\n              }\r\n\r\n              if (laptopBtn && image.devices && image.devices.laptop) {\r\n                laptopBtn.onclick = () => {\r\n                  removeValidationMessage();\r\n                  selectedImageUrl = image.devices.laptop;\r\n                  selectedDeviceName = \"Lapotp\";\r\n                  clearSelections();\r\n                  laptopBtn.classList.add(\"selected\");\r\n                };\r\n              }\r\n\r\n              if (mobileBtn && image.devices && image.devices.mobile) {\r\n                mobileBtn.onclick = () => {\r\n                  removeValidationMessage();\r\n                  selectedImageUrl = image.devices.mobile;\r\n                  selectedDeviceName = \"Mobile\";\r\n                  clearSelections();\r\n                  mobileBtn.classList.add(\"selected\");\r\n                };\r\n              }\r\n\r\n              // Utility function to clear previous selections\r\n              function clearSelections() {\r\n                desktopBtn.classList.remove(\"selected\");\r\n                laptopBtn.classList.remove(\"selected\");\r\n                mobileBtn.classList.remove(\"selected\");\r\n              }\r\n\r\n              function downloadImage(url, fileName) {\r\n                const link = document.createElement(\"a\");\r\n                link.href = url;\r\n                link.download = fileName;\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n              }\r\n\r\n              function removeValidationMessage() {\r\n                const validationMessage = document.querySelector(\"#download-validation-msg\");\r\n                if (validationMessage) {\r\n                  validationMessage.remove();\r\n                }\r\n              }\r\n              // Add a click event to the main download button to download the selected image\r\n              const mainDownloadBtn =\r\n                document.querySelector(\".download-button\");\r\n              mainDownloadBtn.onclick = () => {\r\n                // Check if a validation message already exists\r\n                removeValidationMessage();\r\n\r\n                let validationMessage = document.querySelector(\r\n                  \"#download-validation-msg\"\r\n                );\r\n\r\n                if (!selectedImageUrl) {\r\n                  if (!validationMessage) {\r\n                    // Create the validation message dynamically\r\n                    validationMessage = document.createElement(\"div\");\r\n                    validationMessage.id = \"download-validation-msg\"; // Unique ID for the validation message\r\n                    validationMessage.style.color = \"red\";\r\n                    validationMessage.style.marginTop = \"18px\"; // Add spacing below the button\r\n                    validationMessage.style.fontSize = \"14px\";\r\n                    validationMessage.style.textAlign = \"center\";\r\n                    validationMessage.style.fontFamily = \"Montserrat\"; // Set font family\r\n                    validationMessage.style.fontWeight = \"700\";\r\n                    validationMessage.textContent =\r\n                      \"Please select a device before downloading.\";\r\n                    mainDownloadBtn.parentElement.appendChild(\r\n                      validationMessage\r\n                    );\r\n                  } else {\r\n                    // Update the message if it already exists\r\n                    validationMessage.textContent =\r\n                      \"Please select a device before downloading.\";\r\n                  }\r\n                } else {\r\n                  // Remove the validation message if the input is valid\r\n                  if (validationMessage) {\r\n                    validationMessage.remove();\r\n                  }\r\n                  const fileName = `image_${selectedDeviceName}.jpg`;\r\n                  downloadImage(selectedImageUrl, fileName);\r\n                }\r\n              };\r\n            } else {\r\n              console.error(\"Device selection modal not found.\");\r\n            }\r\n          });\r\n        }\r\n\r\n        function removeValidationMessage() {\r\n          const validationMessage = document.querySelector(\"#download-validation-msg\");\r\n          if (validationMessage) {\r\n            validationMessage.remove();\r\n          }\r\n        }\r\n\r\n        const closeBtn = document.querySelector(\".close-device-modal\");\r\n        if (closeBtn) {\r\n          closeBtn.addEventListener(\"click\", () => {\r\n            const deviceDownloadPopup = document.getElementById(\r\n              \"deviceSelectionModal\"\r\n            );\r\n            removeValidationMessage();\r\n            if (deviceDownloadPopup) {\r\n              deviceDownloadPopup.style.display = \"none\"; // Hide the modal\r\n              const desktopBtn =\r\n                deviceDownloadPopup.querySelector(\".download-desktop\");\r\n              const laptopBtn =\r\n                deviceDownloadPopup.querySelector(\".download-laptop\");\r\n              const mobileBtn =\r\n                deviceDownloadPopup.querySelector(\".download-mobile\");\r\n              desktopBtn.classList.remove(\"selected\");\r\n              laptopBtn.classList.remove(\"selected\");\r\n              mobileBtn.classList.remove(\"selected\");\r\n            }\r\n          });\r\n        }\r\n\r\n        const div = element.querySelector(\"div[data-store]\");\r\n\r\n        // Retrieve the 'data-store' attribute and parse it as JSON\r\n        const data = JSON.parse(div.getAttribute(\"data-store\"));\r\n\r\n        console.log(data);\r\n        // Access the images array\r\n        const images = data.images;\r\n\r\n        // Find the swiper container where you want to insert the slides\r\n\r\n        const bar = document.createElement(\"div\");\r\n        bar.classList.add(\"progress-bar\");\r\n        progressBarsWrapper.appendChild(bar);\r\n\r\n        // Append the new slide to the swiper-wrapper\r\n        swiperWrapper.appendChild(slideDiv);\r\n      });\r\n\r\n      images.forEach((image, index) => {\r\n        const slideDiv = document.createElement(\"div\");\r\n        slideDiv.classList.add(\"swiper-slide\");\r\n        const slideBottomDiv = document.createElement(\"div\");\r\n        slideBottomDiv.classList.add(\"swiper-slide\");\r\n        // Create slide content with background image and captions\r\n        const body = document.querySelector(\"body\");\r\n        currentImage = image;\r\n        body.style.overflow = \"hidden\";\r\n        // body.style.height = '100vh';\r\n        slideDiv.innerHTML = `\r\n        <div class=\"slide-content\" style=\"background-image: url('${image.url\r\n          }')\">\r\n            <div class=\"image-caption\">\r\n                <span>${image.title}</span>\r\n                <span>${index + 1} / ${image.length}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n            <button class=\"action-button gallery1--download\" data-download=\"#\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<g clip-path=\"url(#clip0_1362_290)\">\r\n<path d=\"M15 13.4001C14.3667 13.4001 13.8 13.6501 13.3667 14.0417L7.425 10.5834C7.46667 10.3917 7.5 10.2001 7.5 10.0001C7.5 9.80008 7.46667 9.60842 7.425 9.41675L13.3 5.99175C13.75 6.40841 14.3417 6.66675 15 6.66675C16.3833 6.66675 17.5 5.55008 17.5 4.16675C17.5 2.78341 16.3833 1.66675 15 1.66675C13.6167 1.66675 12.5 2.78341 12.5 4.16675C12.5 4.36675 12.5333 4.55841 12.575 4.75008L6.7 8.17508C6.25 7.75842 5.65833 7.50008 5 7.50008C3.61667 7.50008 2.5 8.61675 2.5 10.0001C2.5 11.3834 3.61667 12.5001 5 12.5001C5.65833 12.5001 6.25 12.2417 6.7 11.8251L12.6333 15.2917C12.5917 15.4667 12.5667 15.6501 12.5667 15.8334C12.5667 17.1751 13.6583 18.2667 15 18.2667C16.3417 18.2667 17.4333 17.1751 17.4333 15.8334C17.4333 14.4917 16.3417 13.4001 15 13.4001Z\" fill=\"#EDEDED\"/>\r\n</g>\r\n<defs>\r\n<clipPath id=\"clip0_1362_290\">\r\n<rect width=\"20\" height=\"20\" fill=\"white\"/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n\r\n            </button>\r\n        </div>\r\n    `;\r\n\r\n        slideBottomDiv.innerHTML = `  \r\n        <div class=\"slide-content\" style=\"background-image: url('${image.url}')\">\r\n            `;\r\n\r\n        bottomSwipwerWrapper.appendChild(slideBottomDiv);\r\n      });\r\n\r\n      const thumbsSwiper = new Swiper(\".thumbnail-swiper\", {\r\n        spaceBetween: 10,\r\n        slidesPerView: \"auto\",\r\n        freeMode: true,\r\n        watchSlidesProgress: true,\r\n      });\r\n\r\n      const mainSwiper = new Swiper(\".main-swiper\", {\r\n        spaceBetween: 10,\r\n        navigation: {\r\n          nextEl: \".swiper-button-next\",\r\n          prevEl: \".swiper-button-prev\",\r\n        },\r\n        thumbs: {\r\n          swiper: thumbsSwiper,\r\n        },\r\n        on: {\r\n          slideChange: function () {\r\n            updateProgressBars(this.activeIndex);\r\n            updateActionButtons(selectedPopup); // Update action buttons on slide change\r\n          },\r\n        },\r\n      });\r\n\r\n      function updateProgressBars(activeIndex) {\r\n        const progressBars = document.querySelectorAll(\".progress-bar\");\r\n        progressBars.forEach((bar, index) => {\r\n          bar.classList.toggle(\"active\", index <= activeIndex);\r\n        });\r\n      }\r\n\r\n      // Global variable for selected popup\r\n      let selectedPopup = \"\";\r\n    }\r\n\r\n    // Select gallery items and open popup on click\r\n    const galleryPopup = document.querySelectorAll(\".highlights .image-card\");\r\n    galleryPopup.forEach((element) => {\r\n      element.addEventListener(\"click\", () => {\r\n        swiperWrapper.innerHTML = \"\";\r\n        (progressBarsWrapper.innerHTML = \"\"),\r\n          (bottomSwipwerWrapper.innerHTML = \"\"),\r\n          initDataStore(element);\r\n        document.getElementById(\"gallery1\").style.display = \"flex\";\r\n        document.querySelector(\"body\").classList.add(\"popup-open\");\r\n\r\n        // Pause both swipers when image is clicked\r\n        if (leftToRightSwiper && leftToRightSwiper.autoplay) {\r\n          leftToRightSwiper.autoplay.stop();\r\n        }\r\n        if (rightToLeftSwiper && rightToLeftSwiper.autoplay) {\r\n          rightToLeftSwiper.autoplay.stop();\r\n        }\r\n\r\n        currentSlideData = {\r\n          imageUrl: element.getAttribute(\"data-href-url\"),\r\n          title: element.getAttribute(\"data-title\"),\r\n          shareData: {\r\n            title: \"Royal Enfield Highlights\",\r\n            text: element.getAttribute(\"data-share-text\"),\r\n            url: window.location.href,\r\n          },\r\n        };\r\n\r\n        updateActionButtons(\"gallery1\");\r\n      });\r\n    });\r\n\r\n    const closeButton = document.querySelectorAll(\".close-btn\");\r\n\r\n    closeButton.forEach((element) => {\r\n      element.addEventListener(\"click\", () => {\r\n        document.getElementById(\"gallery1\").style.display = \"none\";\r\n        document.querySelector(\"body\").classList.remove(\"popup-open\");\r\n        const body = document.querySelector(\"body\");\r\n        body.style.overflowY = \"auto\";\r\n        body.style.overflowX = \"hidden\";\r\n        body.style.height = \"auto\";\r\n\r\n        // Resume swipers when popup is closed\r\n        if (leftToRightSwiper && leftToRightSwiper.autoplay) {\r\n          leftToRightSwiper.autoplay.start();\r\n        }\r\n        if (rightToLeftSwiper && rightToLeftSwiper.autoplay) {\r\n          rightToLeftSwiper.autoplay.start();\r\n        }\r\n      });\r\n    });\r\n\r\n    function updateActionButtons(galleryId) {\r\n      const downloadRides = document.querySelectorAll(\".gallery1--download\");\r\n      const shareRides = document.querySelectorAll(\".gallery1--share\");\r\n      const closeBtn = document.querySelectorAll(\".close-device-modal\");\r\n      const deviceDownloadPopup = document.getElementById(\r\n        \"deviceSelectionModal\"\r\n      );\r\n      const desktopBtn = deviceDownloadPopup.querySelector(\".download-desktop\");\r\n      const laptopBtn = deviceDownloadPopup.querySelector(\".download-laptop\");\r\n      const mobileBtn = deviceDownloadPopup.querySelector(\".download-mobile\");\r\n      let selectedImageUrl = null; // To store the URL of the selected image\r\n      let selectedDeviceName = \"\"; // To store the selected device name for   \r\n\r\n      // Function to remove validation message\r\n      function removeValidationMessage() {\r\n        const validationMessage = document.querySelector(\"#download-validation-msg\");\r\n        if (validationMessage) {\r\n          validationMessage.remove();\r\n        }\r\n      }\r\n\r\n      // Close modal functionality\r\n      closeBtn.forEach((element) => {\r\n        element.addEventListener(\"click\", () => {\r\n          removeValidationMessage();\r\n          desktopBtn.classList.remove(\"selected\");\r\n          laptopBtn.classList.remove(\"selected\");\r\n          mobileBtn.classList.remove(\"selected\");\r\n          deviceDownloadPopup.style.display = \"none\";\r\n        });\r\n      });\r\n\r\n      // Open modal functionality\r\n      downloadRides.forEach((element) => {\r\n        element.addEventListener(\"click\", () => {\r\n          deviceDownloadPopup.style.display = \"block\";\r\n        });\r\n      });\r\n\r\n      // Add event listeners for each device download button\r\n\r\n      // Add an 'active' class to the selected button and store the selected image URL and device name\r\n      if (desktopBtn) {\r\n        desktopBtn.onclick = () => {\r\n          selectedImageUrl = currentSlideData.devices?.desktop || null;\r\n          selectedDeviceName = \"desktop\";\r\n          updateSelection(desktopBtn);\r\n        };\r\n      }\r\n\r\n      if (laptopBtn) {\r\n        laptopBtn.onclick = () => {\r\n          selectedImageUrl = currentSlideData.devices?.laptop || null;\r\n          selectedDeviceName = \"laptop\";\r\n          updateSelection(laptopBtn);\r\n        };\r\n      }\r\n\r\n      if (mobileBtn) {\r\n        mobileBtn.onclick = () => {\r\n          selectedImageUrl = currentSlideData.devices?.mobile || null;\r\n          selectedDeviceName = \"mobile\";\r\n          updateSelection(mobileBtn);\r\n        };\r\n      }\r\n\r\n      // Utility function to update selection\r\n      function updateSelection(selectedButton) {\r\n        clearSelections();\r\n        selectedButton.classList.add(\"selected\");\r\n      }\r\n\r\n      // Utility function to clear previous selections\r\n      function clearSelections() {\r\n        if (desktopBtn) desktopBtn.classList.remove(\"selected\");\r\n        if (laptopBtn) laptopBtn.classList.remove(\"selected\");\r\n        if (mobileBtn) mobileBtn.classList.remove(\"selected\");\r\n        selectedImageUrl = null; // Reset the URL\r\n        selectedDeviceName = \"\"; // Reset the device name\r\n      }\r\n\r\n      const mainDownloadBtn = document.querySelector(\".download-button\");\r\n      mainDownloadBtn.onclick = () => {\r\n        // Check if a validation message already exists\r\n        removeValidationMessage();\r\n\r\n        let validationMessage = document.querySelector(\r\n          \"#download-validation-msg\"\r\n        );\r\n\r\n        if (!selectedImageUrl) {\r\n          if (!validationMessage) {\r\n            // Create the validation message dynamically\r\n            validationMessage = document.createElement(\"div\");\r\n            validationMessage.id = \"download-validation-msg\"; // Unique ID for the validation message\r\n            validationMessage.style.color = \"red\";\r\n            validationMessage.style.marginTop = \"8px\"; // Add spacing below the button\r\n            validationMessage.style.fontSize = \"14px\"; // Optional styling\r\n            validationMessage.textContent =\r\n              \"Please select a device before downloading.\";\r\n            mainDownloadBtn.parentElement.appendChild(validationMessage);\r\n          } else {\r\n            // Update the message if it already exists\r\n            validationMessage.textContent =\r\n              \"Please select a device before downloading.\";\r\n          }\r\n        } else {\r\n          // Remove the validation message if the input is valid\r\n          if (validationMessage) {\r\n            validationMessage.remove();\r\n          }\r\n          const fileName = `image_${selectedDeviceName}.jpg`;\r\n          downloadImage(selectedImageUrl, fileName);\r\n        }\r\n      };\r\n\r\n      // Handle share button clicks\r\n      shareRides.forEach((element) => {\r\n        element.addEventListener(\"click\", () => {\r\n          handleShare(currentSlideData);\r\n        });\r\n      });\r\n\r\n      // Handle gallery-specific download and share actions\r\n      const downloadBtn = document.getElementById(`${galleryId}--download`);\r\n      const shareBtn = document.getElementById(`${galleryId}--share`);\r\n\r\n      if (downloadBtn) {\r\n        downloadBtn.onclick = () => handleDownload(currentSlideData);\r\n      }\r\n\r\n      function downloadImage(url, fileName) {\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n    }\r\n\r\n    // Handle download action\r\n    async function handleDownload(slideData) {\r\n      try {\r\n        console.log(slideData);\r\n      } catch (error) {\r\n        console.error(\"Download failed:\", error);\r\n      }\r\n    }\r\n\r\n    // Handle share action\r\n    async function handleShare(slideData) {\r\n      console.log(\"Sharing:\", slideData);\r\n\r\n      if (navigator.share) {\r\n        try {\r\n          await navigator.share(slideData.shareData);\r\n          console.log(\"Content shared successfully\");\r\n        } catch (error) {\r\n          console.error(\"Share failed:\", error);\r\n        }\r\n      } else {\r\n        // Fallback for browsers that don't support Web Share API\r\n        const shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(\r\n          slideData.shareData.text || \"Check this out!\"\r\n        )}&url=${encodeURIComponent(slideData.shareData.url)}`;\r\n        window.open(shareUrl, \"_blank\");\r\n        console.log(\"Opened fallback share window\");\r\n      }\r\n    }\r\n\r\n    // Left to Right Swiper Instance\r\n    const leftToRightSwiper = new Swiper(\".swiper-left-right\", {\r\n      spaceBetween: 8,\r\n      centeredSlides: true,\r\n      speed: 4000,\r\n      disableOnInteraction: true,\r\n      autoplay: {\r\n        delay: 1,\r\n      },\r\n      loop: true,\r\n      slidesPerView: 1.2,\r\n      allowTouchMove: false,\r\n      breakpoints: {\r\n        768: {\r\n          slidesPerView: 5,\r\n          spaceBetween: 24,\r\n        },\r\n      },\r\n    });\r\n\r\n    const rightToLeftSwiper = new Swiper(\".swiper-right-left\", {\r\n      spaceBetween: 8,\r\n      centeredSlides: true,\r\n      speed: 4000,\r\n      loop: true,\r\n      slidesPerView: 1.2,\r\n      disableOnInteraction: true,\r\n      allowTouchMove: false,\r\n      breakpoints: {\r\n        768: {\r\n          slidesPerView: 5,\r\n          spaceBetween: 24,\r\n        },\r\n      },\r\n      autoplay: { delay: 1, reverseDirection: true },\r\n    });\r\n\r\n    // Add back the openPopup function (was previously inside initDataStore)\r\n    function openPopup() {\r\n      console.log(\"openPopup\");\r\n    }\r\n  },\r\n};\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (HighlightsComponent);\r\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/components/re-rides/highlights/js/highlights.js?");

/***/ })

}]);